/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BucketListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_PER_ITEM"
      | "MAX_ITEMS_PER_USER"
      | "addItem"
      | "builder"
      | "clearMyItems"
      | "getItems"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FeePaid" | "ItemAdded" | "ItemsCleared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_PER_ITEM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ITEMS_PER_USER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addItem", values: [string]): string;
  encodeFunctionData(functionFragment: "builder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clearMyItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItems",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_PER_ITEM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ITEMS_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "builder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearMyItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItems", data: BytesLike): Result;
}

export namespace FeePaidEvent {
  export type InputTuple = [payer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [payer: string, amount: bigint];
  export interface OutputObject {
    payer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    index: BigNumberish,
    item: string
  ];
  export type OutputTuple = [user: string, index: bigint, item: string];
  export interface OutputObject {
    user: string;
    index: bigint;
    item: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemsClearedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BucketList extends BaseContract {
  connect(runner?: ContractRunner | null): BucketList;
  waitForDeployment(): Promise<this>;

  interface: BucketListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_PER_ITEM: TypedContractMethod<[], [bigint], "view">;

  MAX_ITEMS_PER_USER: TypedContractMethod<[], [bigint], "view">;

  addItem: TypedContractMethod<[item: string], [void], "payable">;

  builder: TypedContractMethod<[], [string], "view">;

  clearMyItems: TypedContractMethod<[], [void], "nonpayable">;

  getItems: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_PER_ITEM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ITEMS_PER_USER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addItem"
  ): TypedContractMethod<[item: string], [void], "payable">;
  getFunction(
    nameOrSignature: "builder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clearMyItems"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getItems"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;

  getEvent(
    key: "FeePaid"
  ): TypedContractEvent<
    FeePaidEvent.InputTuple,
    FeePaidEvent.OutputTuple,
    FeePaidEvent.OutputObject
  >;
  getEvent(
    key: "ItemAdded"
  ): TypedContractEvent<
    ItemAddedEvent.InputTuple,
    ItemAddedEvent.OutputTuple,
    ItemAddedEvent.OutputObject
  >;
  getEvent(
    key: "ItemsCleared"
  ): TypedContractEvent<
    ItemsClearedEvent.InputTuple,
    ItemsClearedEvent.OutputTuple,
    ItemsClearedEvent.OutputObject
  >;

  filters: {
    "FeePaid(address,uint256)": TypedContractEvent<
      FeePaidEvent.InputTuple,
      FeePaidEvent.OutputTuple,
      FeePaidEvent.OutputObject
    >;
    FeePaid: TypedContractEvent<
      FeePaidEvent.InputTuple,
      FeePaidEvent.OutputTuple,
      FeePaidEvent.OutputObject
    >;

    "ItemAdded(address,uint8,string)": TypedContractEvent<
      ItemAddedEvent.InputTuple,
      ItemAddedEvent.OutputTuple,
      ItemAddedEvent.OutputObject
    >;
    ItemAdded: TypedContractEvent<
      ItemAddedEvent.InputTuple,
      ItemAddedEvent.OutputTuple,
      ItemAddedEvent.OutputObject
    >;

    "ItemsCleared(address)": TypedContractEvent<
      ItemsClearedEvent.InputTuple,
      ItemsClearedEvent.OutputTuple,
      ItemsClearedEvent.OutputObject
    >;
    ItemsCleared: TypedContractEvent<
      ItemsClearedEvent.InputTuple,
      ItemsClearedEvent.OutputTuple,
      ItemsClearedEvent.OutputObject
    >;
  };
}
